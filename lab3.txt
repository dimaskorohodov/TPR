import numpy as np
from tabulate import tabulate

task_array = [[ 7, 1, 1, 10, 2, 9, 3, 8, 8, 4, 1, 9],
              [ 7, 5, 6, 10, 6, 9, 3, 8, 8, 10, 5, 9],
              [ 7, 5, 6, 10, 6, 9, 3, 8, 8, 10, 6, 9],
              [ 7, 5, 9, 10, 10, 9, 9, 8, 8, 10, 6, 9],
              [ 7, 6, 10, 10, 10, 9, 9, 8, 8, 10, 6, 9],
              [ 5, 2, 8, 4, 1, 2, 9, 5, 8, 3, 5, 8],
              [ 5, 2, 6, 4, 1, 1, 1, 5, 8, 3, 5, 2],
              [ 9, 3, 9, 4, 5, 3, 10, 10, 9, 6, 5, 2],
              [ 9, 5, 9, 10, 9, 9, 10, 10, 9, 10, 5, 9],
              [ 9, 5, 9, 10, 9, 9, 10, 10, 9, 10, 9, 9],
              [ 2, 1, 6, 10, 6, 1, 3, 8, 8, 3, 6, 1],
              [ 2, 1, 4, 2, 2, 1, 3, 2, 8, 2, 6, 1],
              [ 9, 6, 9, 10, 9, 9, 10, 10, 9, 10, 9, 9],
              [ 2, 6, 5, 10, 5, 8, 5, 1, 1, 8, 1, 6],
              [ 2, 3, 5, 1, 5, 6, 3, 1, 1, 8, 1, 1],
              [ 6, 3, 6, 5, 5, 6, 3, 8, 5, 8, 2, 4],
              [ 2, 1, 6, 5, 5, 1, 2, 5, 5, 3, 2, 1],
              [ 2, 1, 6, 5, 5, 1, 2, 2, 3, 3, 2, 1],
              [ 2, 1, 3, 5, 1, 1, 2, 2, 3, 3, 2, 1],
              [ 2, 1, 3, 5, 1, 1, 2, 2, 3, 2, 2, 1]]


def compare_alternatives ( a1, a2):
    comparison_result = np.arange(len(a1))
    for i in range(0, len(a1)):
        if a1[i] > a2[i]:
            comparison_result[i] = 1
            continue
        elif a1[i] < a2[i]:
            comparison_result[i] = -1
            continue
        elif a1[i] == a2[i]:
            comparison_result[i] = 0
    return comparison_result

#формуємо множину векторів сигма попарним порівнянням альтернатив
def sigma_vectors(matrix):
    alternatives = np.array(matrix)
    result_matrix = [[0]*20 for i in range(20)]
    for i in range(0, 20):
        for j in range(0, 20):
            result_matrix[i][j] = compare_alternatives(alternatives[i], alternatives[j])
    return result_matrix

s_v = sigma_vectors(task_array)



def I(r):
    return (r==r.T)*r

def P(r):
    return r-I(r)


def N(r):
    return (r==r.T)-I(r)


def dom_max_p(m):
    matrix = np.array(m)
    max_ = []
    for i in range(0, len(matrix)):
        if matrix[i][i]==0 and matrix[i].sum()==len(matrix)-1:
            max_.append(i+1)
    return max_

def dom_max_r(m):
    matrix = np.array(m)
    max_ = []
    strong_max = []
    for i in range(0, len(matrix)):
        if matrix[i].sum()==len(matrix):
            max_.append(i+1)
            if matrix[:,i].sum()==1:
                strong_max.append(i+1)
    return max_, strong_max


def block_max_p(m):
    matrix = np.array(m)
    max_ = []
    for i in range(0, len(matrix)):
        if matrix[:,i].sum()==0:
            max_.append(i+1)
    return max_


def block_max_r(m):
    matrix = np.array(m)
    sym = I(matrix)
    max_ = []
    strong_max = []
    for i in range(0, len(matrix)):
        if np.any(np.array_equal(matrix[:,i], sym[:,i])==False)==False:
            max_.append(i+1)
            if matrix[:,i].sum()==1 and matrix[i][i]==1:
                strong_max.append(i+1)
    return max_, strong_max
    

def check_symetric_part(matrix):
    sym = I(np.array(matrix))
    flag = False
    for i in range(0, len(sym)):
        if sym[i].sum()>0:
            flag = True
            break
    return flag


def print_max_element(matrix):
    #якщо симетрична частиа наявна - найбільші та максимальні по R
    if check_symetric_part(matrix):
        m, sm = dom_max_r(matrix)
        if len(m)>0:        
            print("Найбільші за R: {}".format(m))
            print("Строго найбільші за R: {}".format(sm))
        else:
            m, sm = block_max_r(matrix)
            print("Максимальні за R: {}".format(m))
            print("Строго максимальні за R: {}".format(sm))
    #якщо симетрична частина відсутня - найбільші та максимальні по Р
    else:
        if len(dom_max_p(matrix))>0:
            print("Найбільший за Р: {}".format(dom_max_p(matrix)))
        else:
            print("Максимальні за Р: {}".format(block_max_p(matrix)))


def pareto_check_vector(vector):
    check = np.array(vector)
    flag = True
    for i in range (0, len(check)):

        if check[i]>=0:
            pass
        else:
            flag = False
    if flag:
        return 1
    else:
        flag = True
        for i in range (0, len(check)):
            if check[i]<=0:
                pass
            else:
                flag = False
        if flag:
            return 2
        else:

            return 3
    
def pareto(sigma_vectors):
    vectors_matrix = np.array(sigma_vectors)
    result_matrix = [[0]*20 for i in range(20)]
    for i in range(0, 20):
        result_matrix[i][i] = 1
    for i in range(0, len(vectors_matrix)):
        for j in range(i+1, len(vectors_matrix)):
            flag = pareto_check_vector(vectors_matrix[i][j])
            if flag == 1:
                result_matrix[i][j] = 1
                result_matrix[j][i] = 0
                continue
            elif flag == 2:
                result_matrix[i][j] = 0
                result_matrix[j][i] = 1
                continue
            elif flag == 3:
                result_matrix[i][j] = 0
                result_matrix[j][i] = 0   
    f = open("task6.txt", "w")
    f.write(" 1" + '\n')
    for i in range(0,len(result_matrix)):
        for j in range(0,len(result_matrix)):
            f.write(" {} ".format(result_matrix[i][j]))
        f.write('\n')
    f.close()
    return result_matrix




def majority(sigma_vectors):
    vectors_matrix = np.array(sigma_vectors)
    result_matrix = [[0]*20 for i in range(20)]
    for i in range(0,len(vectors_matrix)):
        for j in range (i,len(vectors_matrix)):
            if vectors_matrix[i][j].sum()>0:
                result_matrix[i][j]=1
                result_matrix[j][i]=0
                continue
            elif vectors_matrix[i][j].sum()<0:
                result_matrix[i][j]=0
                result_matrix[j][i]=1
                continue
            elif vectors_matrix[i][j].sum()==0:
                result_matrix[i][j]=0
                result_matrix[j][i]=0
    f = open("task7.txt", "w")
    f.write(" 2" + '\n')
    for i in range(0,len(result_matrix)):
        for j in range(0,len(result_matrix)):
            f.write(" {} ".format(result_matrix[i][j]))
        f.write('\n')
    f.close()
    return result_matrix





def sort_strong_order(a):
    ordered = np.arange(len(a))
    order = np.array([ 4, 5, 3, 2, 8, 1, 7, 0, 11, 6, 9, 10])
    for i in range (0, len(a)):
        ordered[i]=a[order[i]]
    return ordered


def sort_sigma_vectors(sigma_vectors):
    vector_matrix = np.array(sigma_vectors)
    sorted_matrix = [[0]*20 for i in range(20)]
    for i in range(0,len(vector_matrix)):
        for j in range(0,len(vector_matrix)):
            sorted_matrix[i][j] = sort_strong_order(vector_matrix[i][j])
    return sorted_matrix

def lexicographic(matrix):
    sorted_vectors = np.array(matrix)
    result_matrix = [[0]*20 for i in range(20)]
    for i in range (0, len(result_matrix)):
        result_matrix[i][i]=0
    for i in range(0, len(sorted_vectors)):
        for j in range(i+1, len(sorted_vectors)):

            a = sorted_vectors[i][j]
            for k in range(0, len(a)):

                if a[k]==1:
                    result_matrix[i][j]=1
                    result_matrix[j][i]=0
                    break

                elif a[k]==-1:
                    result_matrix[i][j]=0
                    result_matrix[j][i]=1
                    break
                else:
                    continue
    f = open("task8.txt", "w")
    f.write(" 3" + '\n')
    for i in range(0,len(result_matrix)):
        for j in range(0,len(result_matrix)):
            f.write(" {} ".format(result_matrix[i][j]))
        f.write('\n')
    f.close()
    return result_matrix




def psi_alternatives(matrix):
    alternatives = np.array(matrix)
    for i in range(0,20):
        a=alternatives[i]
        a[::-1].sort()
        alternatives[i] = a
    return alternatives

def podynovskiy(matrix):

    psi_a = psi_alternatives(matrix)

    sv = sigma_vectors(psi_a)

    result_matrix = pareto(sv)   
    f = open("task10.txt", "w")
    f.write(" 5" + '\n')
    for i in range(0,len(result_matrix)):
        for j in range(0,len(result_matrix)):
            f.write(" {} ".format(result_matrix[i][j]))
        f.write('\n')
    f.close()
    return result_matrix

print_max_element(podynovskiy(task_array))
podynovskiy(task_array)



